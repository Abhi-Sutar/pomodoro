name: Build macOS Executable

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:  # Allow manual triggering

# Improved concurrency configuration
concurrency:
  # Use a platform-specific group for individual platform builds
  group: macos-build-${{ github.ref }}
  cancel-in-progress: true

jobs:

  # Check for multi-platform workflow with more reliability
  check-multi-platform:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - id: check
        name: Check if multi-platform workflow is running
        run: |
          # More robust API query with proper error handling
          echo "Checking for multi-platform builds..."
          
          # Add debugging
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          
          # Query with error handling
          WORKFLOWS=$(curl -s -f \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=in_progress" || echo '{"workflow_runs":[]}')
          
          # Debug output
          echo "Active workflows:"
          echo "$WORKFLOWS" | jq '.workflow_runs[] | {id: .id, name: .name}'
          
          # Check for multi-platform workflow with exact name match
          ALL_PLATFORMS_RUNNING=$(echo "$WORKFLOWS" | jq '.workflow_runs[] | select(.name == "Build Multi-Platform Release") | .id' | wc -l)
          echo "Multi-platform workflows running: $ALL_PLATFORMS_RUNNING"
          
          if [ "$ALL_PLATFORMS_RUNNING" -gt 0 ]; then
            echo "Multi-platform workflow is running, skipping this workflow"
            echo "should-run=false" >> $GITHUB_OUTPUT
          else
            echo "No multi-platform workflow detected, proceeding"
            echo "should-run=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-multi-platform
    # Double check with clearer condition expression
    if: ${{ needs.check-multi-platform.outputs.should-run == 'true' }}
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Check Tcl/Tk Versions
      run: |
        echo "Checking Tcl version:"
        ls -l /System/Library/Frameworks/Tcl.framework/Versions
        echo "Checking Tk version:"
        ls -l /System/Library/Frameworks/Tk.framework/Versions
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install required dependencies including Pillow
        pip install pipreqs pyinstaller pillow
        pipreqs . --force --ignore build_local.py
        pip install -r requirements.txt
        
        # Ensure tkinter is available on macOS
        # Python from actions/setup-python should include tkinter
        # but we'll install it via brew as a fallback
        if ! python -c "import tkinter" &> /dev/null; then
          echo "Tkinter not found in Python installation, installing via brew..."
          brew install python-tk@3.10
        fi
        
        
    - name: Verify dependencies
      run: |
        # Verify tkinter
        python -c "import tkinter; print('tkinter version:', tkinter.TkVersion)"
        
        # Verify PIL
        python -c "from PIL import Image; print('Pillow version:', Image.__version__)"
        
    - name: Build executable with macOS icon
      run: |
        # Find Tcl/Tk framework paths dynamically
        TCL_FRAMEWORK=$(find /System/Library/Frameworks/Tcl.framework/Versions -type f -name "Tcl" | head -1 || echo "")
        TK_FRAMEWORK=$(find /System/Library/Frameworks/Tk.framework/Versions -type f -name "Tk" | head -1 || echo "")
        
        # Debug output
        echo "Found Tcl at: $TCL_FRAMEWORK"
        echo "Found Tk at: $TK_FRAMEWORK"
        
        # Build command with frameworks if found
        if [ -n "$TCL_FRAMEWORK" ] && [ -n "$TK_FRAMEWORK" ]; then
          echo "Using detected Tcl/Tk frameworks"
          pyinstaller --windowed --name PomodoroFlashTimer \
            --icon=./resources/pomodoro.icns \
            --add-binary "$TCL_FRAMEWORK:." \
            --add-binary "$TK_FRAMEWORK:." \
            pomodoroFlashTimer.py
        else
          echo "Frameworks not found, building without explicit Tcl/Tk paths"
          # Try alternative approach
          pyinstaller --windowed --name PomodoroFlashTimer \
            --icon=./resources/pomodoro.icns \
            --hidden-import tkinter \
            --collect-submodules tkinter \
            pomodoroFlashTimer.py
        fi
      
    - name: Debug Info
      run: |
        echo "Current directory: $(pwd)"
        echo "Files in dist directory:"
        if [ -d "dist" ]; then
          ls -la dist
        else
          echo "dist directory does not exist"
        fi
        echo "Current user: $(whoami)"
        echo "GitHub ref: $GITHUB_REF"
        # Check for app bundle structure
        find dist -type f | sort
      
    - name: Create release package
      run: |
        mkdir -p release
        # Copy the executable
        if [ -d "dist/PomodoroFlashTimer.app" ]; then
          # If it's a macOS app bundle
          cp -R dist/PomodoroFlashTimer.app release/
        else
          # If it's a standard executable
          cp dist/PomodoroFlashTimer release/
          chmod +x release/PomodoroFlashTimer
        fi
        cp README.md release/
        
    - name: Get tag version
      id: get_version
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          # This is a tag-based trigger
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
        else
          # This is a manual trigger
          echo "VERSION=dev-$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
        fi
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: steps.get_version.outputs.IS_RELEASE == 'true'
      with:
        files: |
          release/*
        name: Pomodoro Flash Timer ${{ steps.get_version.outputs.VERSION }} (macOS)
        draft: false
        prerelease: false
        body: |
          # Pomodoro Flash Timer ${{ steps.get_version.outputs.VERSION }} for macOS
          
          ## Platform
          - macOS
          
          ## Installation
          - Download the executable
          - You may need to right-click and choose "Open" to bypass Gatekeeper
          - No installation required
          
          ## Usage
          - Run the application
          - Enter work and break times when prompted
          - Timer will appear in the bottom-left corner of your screen
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      if: steps.get_version.outputs.IS_RELEASE == 'false'
      with:
        name: PomodoroFlashTimer-macOS-${{ steps.get_version.outputs.VERSION }}
        path: release/
        retention-days: 7