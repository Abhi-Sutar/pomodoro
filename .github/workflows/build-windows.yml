name: Build Windows Executable

on:
  workflow_dispatch:  # Allow manual triggering

# Add this block to skip when build-all-platforms is running
concurrency:
    group: release-${{ github.ref }}
    cancel-in-progress: true

jobs:
  check-workflow:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - id: check
        name: Check if multi-platform workflow is running
        run: |
          # Check recent workflow runs to see if build-all-platforms is running
          WORKFLOWS=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?event=${{ github.event_name }}&status=in_progress")
          
          ALL_PLATFORMS_RUNNING=$(echo "$WORKFLOWS" | jq '.workflow_runs[] | select(.name == "Build Multi-Platform Release") | .id' | wc -l)
          
          if [ "$ALL_PLATFORMS_RUNNING" -gt 0 ]; then
            echo "Multi-platform workflow is running, skipping this workflow"
            echo "should-run=false" >> $GITHUB_OUTPUT
          else
            echo "No multi-platform workflow detected, proceeding"
            echo "should-run=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-workflow
    if: needs.check-workflow.outputs.should-run == 'true'
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4  # Update from v3
      
    - name: Set up Python
      uses: actions/setup-python@v5  # Update from v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # tkinter is included in Windows Python installations
        pip install pyinstaller
        
    - name: Test tkinter availability
      run: |
        python -c "import tkinter; print('tkinter version:', tkinter.TkVersion)"
        
    - name: Build executable
      run: |
        pyinstaller --onefile --noconsole --name PomodoroFlashTimer --icon=./resources/pomodoro.ico pomodoroFlashTimer.py
      
    - name: Debug Info
      run: |
        echo "Current directory: $(Get-Location)"
        echo "Files in dist directory:"
        if (Test-Path -Path dist) {
            Get-ChildItem -Path dist -Force
        } else {
            echo "dist directory does not exist"
        }
        echo "Current user: $env:USERNAME"
        echo "GitHub ref: $env:GITHUB_REF"
      
    - name: Create release package
      run: |
        mkdir -p release
        copy -Path "dist\PomodoroFlashTimer.exe" -Destination "release\"
        copy README.md release\
        
    - name: Get tag version
      id: get_version
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          # This is a tag-based trigger
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
        else
          # This is a manual trigger
          echo "VERSION=dev-$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
        fi
      shell: bash
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: steps.get_version.outputs.IS_RELEASE == 'true'
      with:
        files: |
          release/PomodoroFlashTimer.exe
          release/README.md
        name: Pomodoro Flash Timer ${{ steps.get_version.outputs.VERSION }}
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        fail_on_unmatched_files: false  # Important: don't fail if release already exists
        body_path: .github/release-notes.md  # Optional: use a shared release notes file
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload build artifact
      uses: actions/upload-artifact@v4  # Changed from v3 to v4
      if: steps.get_version.outputs.IS_RELEASE == 'false'
      with:
        name: PomodoroFlashTimer-${{ steps.get_version.outputs.VERSION }}
        path: release/
        retention-days: 7